#include "cameraapp.h"
#include <QImage>
#include <QPixmap>
#include <QDebug>

CameraApp::CameraApp(QWidget *parent) : QWidget(parent), cap(0) {
    // Initialize UI components
    videoLabel = new QLabel(this);
    videoLabel->setFixedSize(640, 480);

    imageLabel = new QLabel(this);
    imageLabel->setFixedSize(640, 480);
    imageLabel->hide(); // Initially hide the captured image display

    shootButton = new QPushButton("Shoot", this);
    viewButton = new QPushButton("View Captured Image", this);
    viewButton->setEnabled(false); // Disabled until an image is captured

    buttonLayout = new QHBoxLayout();
    buttonLayout->addWidget(shootButton);
    buttonLayout->addWidget(viewButton);

    mainLayout = new QVBoxLayout(this);
    mainLayout->addWidget(videoLabel);
    mainLayout->addLayout(buttonLayout);
    mainLayout->addWidget(imageLabel);

    setLayout(mainLayout);
    setWindowTitle("Camera Application");

    // Open the default camera
    if (!cap.isOpened()) {
        qDebug() << "Error: Unable to open camera";
        return;
    }

    // Timer to update live feed
    timer = new QTimer(this);
    connect(timer, &QTimer::timeout, this, &CameraApp::updateFrame);
    timer->start(30);

    // Button connections
    connect(shootButton, &QPushButton::clicked, this, &CameraApp::captureImage);
    connect(viewButton, &QPushButton::clicked, this, &CameraApp::displayCapturedImage);
}

CameraApp::~CameraApp() {
    if (cap.isOpened()) {
        cap.release();
    }
}

void CameraApp::updateFrame() {
    cap >> currentFrame;
    if (!currentFrame.empty()) {
        displayMat(currentFrame, videoLabel);
    }
}

void CameraApp::captureImage() {
    if (!currentFrame.empty()) {
        capturedImage = currentFrame.clone();
        viewButton->setEnabled(true); // Enable view button after capturing
        qDebug() << "Image captured successfully!";
    }
}

void CameraApp::displayCapturedImage() {
    if (!capturedImage.empty()) {
        videoLabel->hide();      // Hide live feed
        imageLabel->show();      // Show captured image
        displayMat(capturedImage, imageLabel);
    }
}

void CameraApp::displayMat(cv::Mat &mat, QLabel *label) {
    cv::Mat rgbFrame;
    cv::cvtColor(mat, rgbFrame, cv::COLOR_BGR2RGB);
    QImage qImg((const uchar *)rgbFrame.data, rgbFrame.cols, rgbFrame.rows, rgbFrame.step, QImage::Format_RGB888);
    label->setPixmap(QPixmap::fromImage(qImg).scaled(label->size(), Qt::KeepAspectRatio, Qt::SmoothTransformation));
}
